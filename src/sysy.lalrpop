use crate::ast::*;

grammar;

match {
  	r"\s*" => {},
	r"//[^\n\r]*[\n\r]*" => {},
  	r"(?s)/\*([^*]|\*+[^*/])*\*+/" => {},
  	_
}

pub CompUnit: CompUnit = <global: (Global)*> => CompUnit {<>};

Global: Global = {
    Decl => Global::Decl(<>),
    FuncDef => Global::Func(<>),
}

FuncDef: FuncDef = {
    <head: FuncDefHead> ")" <block: Block> => {
        FuncDef { func_type: head.0, ident: head.1, params: None, block }
    },
    <head: FuncDefHead> <fparams: FuncFParams> ")" <block: Block> => {
        FuncDef { func_type: head.0, ident: head.1, params: Some(fparams), block }
    },
}

FuncDefHead: (FuncType, String) = {
    "int" <id: Ident> "(" => (FuncType::Int, <>),
    "void" <id: Ident> "(" => (FuncType::Void, <>),
}

FuncType: FuncType = {
    "int"  => FuncType::Int,
    "void" => FuncType::Void,
}

FuncFParams: FuncFParams = {
    <param: FuncFParam> <mut params: ("," <FuncFParam>)*> => {
        params.insert(0, param);
        FuncFParams { params }
    }
};

FuncFParam: FuncFParam = {
    <btype: BType> <ident: Ident> => FuncFParam::Var(<>),
    <btype: BType> <ident: Ident> "[" "]" <cexps: ("[" <ConstExp> "]")*> => FuncFParam::Arr(<>),
}

Block: Block = "{" <bitems: (<BlockItem>)*> "}" => Block {<>};

BlockItem: BlockItem = {
    Decl => BlockItem::Dec(<>),
    Stmt => BlockItem::Stm(<>),
}

Decl: Decl = {
    <cdecl: ConstDecl> => Decl::Const(<>),
    <vdecl: VarDecl> => Decl::Var(<>),   
}

ConstDecl: ConstDecl = {
    "const" <btype: BType> <cdef: ConstDef> <mut cdefs: ("," <ConstDef>)*> ";" => {
        cdefs.insert(0, cdef);
        ConstDecl { btype, cdefs }
    },
}

BType: BType = "int" => BType::INT;

VarDecl: VarDecl = {
    "int" <vdef: VarDef> <mut vdefs: ("," <VarDef>)*> ";" => {
        vdefs.insert(0, vdef);
        VarDecl { btype: BType::INT, vdefs }
    },
}

ConstDef: ConstDef = {
    <ident: Ident> <cexps: ("[" <ConstExp> "]")*> "=" <cinitval: ConstInitVal> => ConstDef {<>},
}

VarDef: VarDef = {
    <ident: Ident> <cexps: ("[" <ConstExp> "]")*> => VarDef::Def(<>),
    <ident: Ident> <cexps: ("[" <ConstExp> "]")*> "=" <initval: InitVal> => VarDef::Ass(<>),
}

ConstInitVal: ConstInitVal = {
    <cexp: ConstExp> => ConstInitVal::Exp(<>),
    "{" "}" => ConstInitVal::Arr(Vec::new()),
    "{" <cinitval: ConstInitVal> <mut cinitvals: ("," <ConstInitVal>)*> "}" => {
        cinitvals.insert(0, cinitval);
        ConstInitVal::Arr(cinitvals)
    },
}

InitVal: InitVal = {
    <exp: Exp> => InitVal::Exp(<>),
    "{" "}" => InitVal::Arr(Vec::new()),
    "{" <initval: InitVal> <mut initvals: ("," <InitVal>)*> "}" => {
        initvals.insert(0, initval);
        InitVal::Arr(initvals)
    },
}

Stmt: Stmt = { 
    <ostmt: OpenStmt> => Stmt::Open(<>),
    <cstmt: CloseStmt> => Stmt::Close(<>),
}

OpenStmt: OpenStmt = {
    "if" "(" <exp: Exp> ")" <stmt: Stmt> => OpenStmt::If(exp, Box::new(stmt)),
    "if" "(" <exp: Exp> ")" <cstmt: CloseStmt> "else" <ostmt: OpenStmt> => OpenStmt::Else(exp, cstmt, Box::new(ostmt)),
    "while" "(" <exp: Exp> ")" <ostmt: OpenStmt> => OpenStmt::While(exp, Box::new(ostmt)),
}

CloseStmt: CloseStmt = {
    <lval: LVal> "=" <exp: Exp> ";" => CloseStmt::Ass(<>),
    <exp: (Exp)?> ";" => CloseStmt::Exp(<>),
    <blk: Block> => CloseStmt::Blk(<>),
    "return" <exp: (Exp)?> ";" => CloseStmt::Ret(<>),
    "if" "(" <exp: Exp> ")" <cstmt1: CloseStmt> "else" <cstmt2: CloseStmt> => CloseStmt::Else(exp, Box::new(cstmt1), Box::new(cstmt2)),
    "while" "(" <exp: Exp> ")" <cstmt: CloseStmt> => CloseStmt::While(exp, Box::new(cstmt)),
    "break" ";" => CloseStmt::Break(),
    "continue" ";" => CloseStmt::Continue(),
}

ConstExp: ConstExp = <exp: Exp> => ConstExp {<>};

Exp: Exp = <loexp: LOrExp> => Exp {<>};

LVal: LVal = {
    <ident: Ident> <exps: ("[" <Exp> "]")*> => LVal {<>},
}

PrimaryExp: PrimaryExp = {
  	"(" <Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
  	Number => PrimaryExp::Number(<>),
  	<lval: LVal> => PrimaryExp::LVal(Box::new(lval)),
}

Number: i32 = <num: IntConst> => <>;

UnaryExp: UnaryExp = {
  	PrimaryExp => UnaryExp::Primary(<>),
  	<op: UnaryOp> <exp: UnaryExp> => UnaryExp::Unary(op, Box::new(exp)),
    <ident: Ident> "(" <rparams: (FuncRParams)?> ")" => UnaryExp::Func(<>),
}

FuncRParams: FuncRParams = {
    <exp: Exp> <mut exps: ("," <Exp>)*> => {
        exps.insert(0, exp);
        FuncRParams { exps }
    }
}

UnaryOp: UnaryOp = {
  	"+" => UnaryOp::Pos,
  	"-" => UnaryOp::Neg,
  	"!" => UnaryOp::Not,
}

MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Mod,
}

MulExp: MulExp = {
    UnaryExp => MulExp::Unary(<>),
    <mexp: MulExp> <mop: MulOp> <uexp: UnaryExp> => MulExp::Mul(Box::new(mexp), mop, uexp)
}

AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Sub,
}

AddExp: AddExp = {
    MulExp => AddExp::Mul(<>),
    <aexp: AddExp> <aop: AddOp> <mexp: MulExp> => AddExp::Add(Box::new(aexp), aop, mexp),
}

RelOp: RelOp = {
    "<" => RelOp::Less,
    ">" => RelOp::Greater,
    "<=" => RelOp::LessEq,
    ">=" => RelOp::GreaterEq,
}

RelExp: RelExp = {
    AddExp => RelExp::Add(<>),
    <rexp: RelExp> <rop: RelOp> <aexp: AddExp> => RelExp::Rel(Box::new(rexp), rop, aexp),
}

EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::Neq,
}

EqExp: EqExp = {
    RelExp => EqExp::Rel(<>),
    <eexp: EqExp> <eop: EqOp> <rexp: RelExp> => EqExp::Eq(Box::new(eexp), eop, rexp),
}

LAndExp: LAndExp = {
    EqExp => LAndExp::Eq(<>),
    <laexp: LAndExp> "&&" <eexp: EqExp> => LAndExp::LAnd(Box::new(laexp), eexp),
}

LOrExp: LOrExp = {
    LAndExp => LOrExp::LAnd(<>),
    <loexp: LOrExp> "||" <laexp: LAndExp> => LOrExp::LOr(Box::new(loexp), laexp),
}

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  	r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  	r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  	r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
