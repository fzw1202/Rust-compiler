use crate::ast::*;

grammar;

match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"(?s)/\*([^*]|\*+[^*/])*\*+/" => {},
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit {<>};

FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => FuncDef {<>}
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block {<>};

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt {<>};

Exp: Exp = <uexp: UnaryExp> => Exp {<>};

PrimaryExp: PrimaryExp = {
  "(" <Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
  Number => PrimaryExp::Number(<>),
}

Number: i32 = <num: IntConst> => <>;

UnaryExp: UnaryExp = {
  PrimaryExp => UnaryExp::Primary(<>),
  <op: UnaryOp> <exp: UnaryExp> => UnaryExp::Unary(op, Box::new(exp)),
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Pos,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
}

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
